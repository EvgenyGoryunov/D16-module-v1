
        # print(user_id)
        # qaz = Note.objects.filter(user_id=user_id).values('id')
        # print(qaz)
        # return Response.objects.filter(note_id=12)
        #
        #
        # return Note.objects.filter(user_id=user_id)
    #
    # def get_context_data(self, **kwargs):
    #     user_id = self.request.user.id
    #     # print(Note.objects.filter(user_id=user_id).values('id'))
    #     context = super().get_context_data(**kwargs)
    #     context['responses'] = Response.objects.filter(user_id=user_id)
    #     # context['responses'] = Response.objects.all()
    #     # context['responses'] = NoteFilter(self.request.GET, queryset=self.get_queryset())
    #     return context


     def post(self, request, *args, **kwargs):
        form = ResponseForm(request.POST)
        print('111')
        if form.is_valid():
            print('222')
            print(self.kwargs.get('pk'))
            form.instance.note_id = self.kwargs.get('pk')
            print('333')
            print(self.kwargs.get('user'))
            print('id', Note.objects.get(id=self.kwargs.get('pk')).user.id)
            print(Note.objects.get(id=self.kwargs.get('pk')).user)
            print('333-1')
            form.instance.user_author = Note.objects.get(id=self.kwargs.get('pk')).user.id

            form.instance.user_response = self.request.user
            print('555')
            form.save()


            print('555')

            return redirect('main')

            # form.instance.user_author = self.kwargs.get('user')
            # pk = self.kwargs.get('pk')
            # print('444', pk)
            # print('Пользователь', request.user, 'добавлен в подписчики категории:', Category.objects.get(pk=pk))
            # qaz = Note.objects.get(pk=pk)
            # qaz1 = Note.objects.get(pk=pk).user_response
            # print(qaz)
            # print(qaz1)
            """нужно получить id последнего отклика, из формы возможно или как???"""
            # print(Response)
            # print(Response.pk)
            # print(Response.user)
            # print(Response.content)

            # Note.objects.get(pk=pk).user_response.add(19)
            # добавить ид данного отклика в бд объявления в графу user_response


            print('444')
            print(self.request.user)
<br><h3>Отклики на объявления </h3><br><br>


Список объявлений данного пользователя
<br><br>
{% for response in responses %}
<!--{{ note.title }}<br>-->
<!--{{ note.id }}<br>-->
<!--{{ note.content | safe }}<br>-->
<!--{{ note.user }}<br><br>-->


{{ response.id }}<br><br>
{{ response.content }}<br><br>
{% endfor %}





<!--<h3><a href="{% url 'news_detail' post.id %}"><u>{{ post }}</u></a></h3>-->

| truncatechars:250
<h6>{{ post.title | truncatechars:250 }}</h6>


# cont = RichTextField(blank=True, null=True)
# content = models.TextField(verbose_name='Контент')
from ckeditor.fields import RichTextField

        # fields = ['title',
        #           'content',
        #           'cont',
        #           'cont_up',
        #           'user',
        #           'category',
        #           ]


    def get_context_data(self, **kwargs):
        """Для добавления новой переменной на страницу (filter)"""
        context = super().get_context_data(**kwargs)
        context['filter'] = NoteFilter(self.request.GET, queryset=self.get_queryset())
        return context

            'name': Textarea(attrs={'cols': 80, 'rows': 20}),

from django.forms import ModelForm, Textarea
from myapp.models import Author

class AuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ('name', 'title', 'birth_date')
        widgets = {
            'name': Textarea(attrs={'cols': 80, 'rows': 20}),
        }

            {{ form.note }}
    {{ form.user }}



<button><a href="{% url 'add_response' note.id %}"><u>Оставить отклик</u></a></button><br><br>
<!--<button><a href="{% url 'add_response' note.id %}"><u>Оставить отклик</u></a></button><br><br>-->

action ="{% url 'Test' }"


            # error = ''
            # form.instance.user = self.request.user
            # print(type(id))
            # print(request.__dict__)
            # form.instance.notenote = id
            # form.instance.note = id
            # form.instance.note = self.kwargs.get('pk')
            # form.instance.note = self.request.note

        # else:
        #     error = 'ERROR'
        # form = ResponseForm()
        # data = {'form': form, 'error': error}
        # return render(request, '/', data)

    # def test(self, request):
    #     print('11111')
    #     if request.method == 'POST':
    #         print('222')
    #         form = ResponseForm(request.POST)
    #         if form.is_valid():
    #             print('333')
    #             form.save()


def test(request):
    form = Test()

    # error = ''
    # if request.method == 'POST':
    #     form = ResponseForm(request.POST)
    #     if form.is_valid():
    #         form.save()
    #         return redirect('main')
    #     else:
    #         error = 'ERROR'
    # form = ResponseForm()
    # data = {'form': form, 'error': error}
    # return render(request, '/', data)

    # def get_object(self, **kwargs):
    #     """Помогает извлечь у объекта нужное значение поля и сам объект"""
    #     id = self.kwargs.get('pk')
    #     print('333333333')
    #     return Note.objects.get(pk=id)

    # def form_valid(self, ResponseForm):
    #     """Автозаполнение поля user"""
    #     print('111111111111111111111111111111111111111')
    #     # ResponseForm.instance.user = self.request.user
    #     # ResponseForm.instance.note = self.request.user
    #     return super().form_valid(ResponseForm)

      # path('test/', Test, name='test'),
      # path('<int:pk>/add_response/', add_response, name='add_response'),
      # path('<int:pk>/delete_response/', delete_response, name='delete_response'),

            # pk = 13
            # Response.objects.get(pk=pk).note_id.add(id)
            # Response.objects.get(pk=pk).note_id.add(request.user)

            print('555')

            # Response.objects.create(note_id=2, user_id='2', content='333content')


class Test(forms.Form):
    content = forms.CharField(max_length=255)
    # content = forms.EmailField(max_length=255)
    user = forms.CharField(max_length=255)
    note = forms.ModelChoiceField(queryset=Note.objects.all())
    # note = forms.ModelChoiceField(Note)

            print('222')


            # id = self.kwargs.get('pk')
            print(id)


    # success_url = reverse_lazy('main')

    #
            # fields = ['content', 'user', 'note']





def add_response(request):
    # pk = request.GET.get('pk', )
    # print('Пользователь', request.user, 'добавлен в подписчики категории:', Category.objects.get(pk=pk))
    # Category.objects.get(pk=pk).subscribers.add(request.user)
    # return redirect('/news/')
    pass


def delete_response(request):
    # pk = request.GET.get('pk', )
    # print('Пользователь', request.user, 'удален из подписчиков категории:', Category.objects.get(pk=pk))
    # Category.objects.get(pk=pk).subscribers.remove(request.user)
    # return redirect('/news/')
    pass


<h5><a href="{% url 'detail' note.id %}"><u>{{ response.contex }}</u></a></h5>

        # print("*******************************************************")
        # print(user_id)

      # return Women.objects.filter(is_published=True)

    # def get(self, request, *args, **kwargs):
    #     user_id = self.request.user.id
    #     print("*********************************", user_id)
    #     return user_id


    # def get(self, request, *args, **kwargs):
    #     user_id = self.request.user
    #     queryset = Response.objects.all()
    #     # queryset = Response.objects.filter(user_id)
    #     return queryset
    # def get(self, request, *args, **kwargs):
    #     user_id = self.request.user
    #     print("*********************************", user_id)
    #
    # def get_context_data(self, **kwargs):
    #     print('1111')
    #     qaz = Response.objects.all()
    #     print('2222')
    #     context = super().get_context_data(**kwargs)
    #     print('3333')
    #     context['filter'] = self.objects.all()
    #     return context

    # def get_context_data(self, **kwargs):
    # context = super().get_context_data(**kwargs)
    #     context['responses'] = NoteFilter(self.request.GET, queryset=self.get_queryset())
    # context['response'] = NoteFilter(self.request.GET, queryset=self.get_queryset())
    # return context
