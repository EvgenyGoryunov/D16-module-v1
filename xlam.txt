
        # Password = {'username': TextInput(attrs={'size': 50, 'placeholder': 'Введите логин'}),
        #            'first_name': TextInput(attrs={'size': 50, 'placeholder': 'Введите имя'}),
        #            'last_name': TextInput(attrs={'size': 50, 'placeholder': 'Введите фамилию'}),
        #            'email': TextInput(attrs={'size': 50, 'placeholder': 'Введите почту'})}

# class UserForm(ModelForm):
# """Форма для создания/редактирования нового объявления"""

# def __init__(self, *args, **kwargs):
#     """Задает название пустого (еще не выбранного) поля"""
#     super().__init__(*args, **kwargs)
# self.fields['category'].empty_label = 'Выберите категорию'


# exclude = ['user']
# задает форматирование полей
# widgets = {'title': TextInput(attrs={'size': 98, 'placeholder': 'Название объявления'})}


        # # если отклик принят, то автору отклика отправить письмо-уведомление
        # # получение нужных объектов из БД
        # pk = self.kwargs.get('pk')
        # note_title = Note.objects.get(pk=Response.objects.get(pk=pk).note_id).title
        # note_id = Note.objects.get(pk=Response.objects.get(pk=pk).note_id).id
        # response_time = Response.objects.get(pk=pk).datetime
        #
        # # формирование письма автору отклика
        # title = f'У вас одобренный отклик на объявление "{str(note_title)[:15]}"'
        # msg = f'На ваш отклик от {str(response_time)[:19]} на объявление "{note_title}" пришло положительное ' \
        #       f'подтверждение. Перейти на объявление http://127.0.0.1:8000/detail/{note_id}'
        # email = 'factoryskill@yandex.ru'
        # response_email = User.objects.get(pk=Response.objects.get(pk=pk).user_response_id).email
        #
        # send_mail(subject=title, message=msg, from_email=email, recipient_list=[response_email, ])
        #
        # print("\n*************** ВЫВОД ПИСЬМА В КОНСОЛЬ (для удобства тестирования почты) **********************\n")
        # print('Тема письма:', title)
        # print('Контент письма:', msg)
        # print('Адрес почты сервера:', email)
        # print('Адрес отправления:', response_email)
        # print("\n************************************ КОНЕЦ ПИСЬМА ********************************************\n")


       #
            # # если создан новый отклик, то автору письма отправить письмо-уведомление
            # # получение нужных объектов из БД
            # pk = self.kwargs.get('pk')
            # user = f'{self.request.user.first_name} {self.request.user.last_name}'
            # user_id = Note.objects.get(pk=pk).user_id
            # note_title = Note.objects.get(pk=pk).title
            # # важный способ получения чистого значения из QuerySet запроса при filter (values('id').[0].get('id'))
            # response_last_id = Response.objects.filter(user_response=self.request.user). \
            #     filter(note=pk).values('id')[0].get('id')
            # response_content = Response.objects.get(pk=response_last_id).content
            # response_time = Response.objects.get(pk=response_last_id).datetime
            #
            # # формирование письма автору объявления
            # title = f'У вас новый отклик от {str(user)[:15]}'
            # msg = f'На ваше объявление "{note_title}" пришел {str(response_time)[:19]} новый отклик от {user} ' \
            #       f'следующего содержания: {response_content}. Перейти в отклики http://127.0.0.1:8000/response/'
            # email = 'factoryskill@yandex.ru'
            # note_email = User.objects.get(pk=user_id).email
            #
            # send_mail(subject=title, message=msg, from_email=email, recipient_list=[note_email, ])
            #
            # print("\n*************** ВЫВОД ПИСЬМА В КОНСОЛЬ (для удобства тестирования почты) *********************\n")
            # print('Тема письма:', title)
            # print('Контент письма:', msg)
            # print('Адрес почты сервера:', email)
            # print('Адрес отправления:', note_email)
            # print("\n************************************ КОНЕЦ ПИСЬМА ********************************************\n")


<!--код для пагинации-->
{% if is_paginated %}
{% if page_obj.has_previous %}
<a href="?page=1">First</a>
<a href="?page={{ page_obj.previous_page_number }}"><<<</a>
{% endif %}
{% for num in page_obj.paginator.page_range %}
{% if page_obj.number == num %}
<a>{{ num }}</a>
{% elif num > page_obj.number|add:'-5' and num < page_obj.number|add:'5' %}
<a href="?page={{ num }}">{{ num }}</a>
{% endif %}
{% endfor %}
{% if page_obj.has_next %}
<a href="?page={{ page_obj.next_page_number }}">>>></a>
<a href="?page={{ page_obj.paginator.num_pages }}">Last</a>
{% endif %}
{% endif %}
<br>
<hr>



    # path('logout/', LogoutView.as_view(template_name='sign/logout.html'), name='logout'),
        # path('login/', LoginView.as_view(template_name='sign/login.html'), name='login'),
            # path('registration/', UserRegistration.as_view(), name='registration'),


                            <!-- <li class="nav-item"><a class="nav-link" href="{% url 'login' %}">Войти</a></li>-->

                            <!-- <li class="nav-item"><a class="nav-link" href="{% url 'profile' %}">Профиль</a></li>-->
<!-- верхняя панель -->

<nav class="navbar navbar-expand-lg navbar-dark bg-dark static-top">
    <div class="container">

        <!-- название сайта -->
        <a class="navbar-brand" href="{% url 'main' %}">-= Game Site =-</a>

        <div class="collapse navbar-collapse" id="navbarResponsive">
            <ul class="navbar-nav ml-auto">

                <!-- кнопки - ссылки на страницы -->

                <li class="nav-item"><a class="nav-link" href="{% url 'create' %}">Создать</a></li>
                <li class="nav-item"><a class="nav-link" href="{% url 'search' %}">Поиск</a></li>
                <li class="nav-item"><a class="nav-link" href="{% url 'response' %}">Отклики</a></li>
                <li class="nav-item"><a class="nav-link" href="{% url 'profile' %}">Профиль</a></li>
                <li class="nav-item"><a class="nav-link" href="http://127.0.0.1:8000/admin">Админка
                    {% if request.user.username %} ({{request.user.username}}) {% endif %}</a></li>
                {% if not request.user.username %}
                <li class="nav-item"><a class="nav-link" href="http://127.0.0.1:8000/accounts/login/">Войти</a></li>
                <!-- <li class="nav-item"><a class="nav-link" href="{% url 'login' %}">Войти</a></li>-->
                {% endif %}
                {% if request.user.username %}
                <li class="nav-item"><a class="nav-link" href="{% url 'logout' %}">Выйти</a></li>
                {% endif %}

            </ul>
        </div>
    </div>
</nav>








<!--    <h4>Логин</h4>-->
<!--    {{ form.username }}-->
<!--    <h4>Имя</h4>-->
<!--    {{ form.first_name }}-->
<!--    <h4>Фамилия</h4>-->
<!--    {{ form.last_name }}-->
<!--    <h4>Почта</h4>-->
<!--    {{ form.email }}-->
<!--    <h4>Пароль</h4>-->
<!--    {{ form.password1 }}-->
<!--    <h4>Пароль еще раз</h4>-->
<!--    {{ form.password2 }}<br><br>-->


        # Response.objects.filter(note__user=user_id).filter(status=False)
        # return Response.objects.filter(user_note=user_id).filter(status=False)
        # context['obj'] = NoteFilter(self.request.GET, queryset=self.get_queryset())
        # context['obj'] = NoteFilter(self.request.GET, queryset=self.get_queryset())

        # response_note_id = Response.objects.get(id=pk).user
        user_id = self.request.user.id
        print('автор объявления', note_author)
        print('текущей пользователь', self.request.user)

        # print(Response.objects.filter(note=pk).filter(note__user=user_id).exists())
        # print(Response.objects.filter(note=pk).exists())
        # print(Response.objects.filter(note=pk) == self.request.user)
        # Response.objects.filter(note=pk).exists()
        print(Response.objects.filter(note=pk).exists())
        print(Response.objects.filter(user_response=self.request.user).exists())
        print(Response.objects.filter(user_response=self.request.user).filter(note=pk).exists())



<!--<hr>-->
<!--<hr>-->
<!--отклики<br><br>-->

<!--{% for response in responses %}-->
<!--content: {{ response.content }}<br>-->
<!--id: {{ response.id }}<br>-->
<!--note_id: {{ response.note_id }}<br><br>-->
<!--{% endfor %}-->


        # print(user_id)
        # qaz = Note.objects.filter(user_id=user_id).values('id')
        # print(qaz)
        # return Response.objects.filter(note_id=12)
        #
        #
        # return Note.objects.filter(user_id=user_id)
    #
    # def get_context_data(self, **kwargs):
    #     user_id = self.request.user.id
    #     # print(Note.objects.filter(user_id=user_id).values('id'))
    #     context = super().get_context_data(**kwargs)
    #     context['responses'] = Response.objects.filter(user_id=user_id)
    #     # context['responses'] = Response.objects.all()
    #     # context['responses'] = NoteFilter(self.request.GET, queryset=self.get_queryset())
    #     return context


     def post(self, request, *args, **kwargs):
        form = ResponseForm(request.POST)
        print('111')
        if form.is_valid():
            print('222')
            print(self.kwargs.get('pk'))
            form.instance.note_id = self.kwargs.get('pk')
            print('333')
            print(self.kwargs.get('user'))
            print('id', Note.objects.get(id=self.kwargs.get('pk')).user.id)
            print(Note.objects.get(id=self.kwargs.get('pk')).user)
            print('333-1')
            form.instance.user_author = Note.objects.get(id=self.kwargs.get('pk')).user.id

            form.instance.user_response = self.request.user
            print('555')
            form.save()


            print('555')

            return redirect('main')

            # form.instance.user_author = self.kwargs.get('user')
            # pk = self.kwargs.get('pk')
            # print('444', pk)
            # print('Пользователь', request.user, 'добавлен в подписчики категории:', Category.objects.get(pk=pk))
            # qaz = Note.objects.get(pk=pk)
            # qaz1 = Note.objects.get(pk=pk).user_response
            # print(qaz)
            # print(qaz1)
            """нужно получить id последнего отклика, из формы возможно или как???"""
            # print(Response)
            # print(Response.pk)
            # print(Response.user)
            # print(Response.content)

            # Note.objects.get(pk=pk).user_response.add(19)
            # добавить ид данного отклика в бд объявления в графу user_response


            print('444')
            print(self.request.user)
<br><h3>Отклики на объявления </h3><br><br>


Список объявлений данного пользователя
<br><br>
{% for response in responses %}
<!--{{ note.title }}<br>-->
<!--{{ note.id }}<br>-->
<!--{{ note.content | safe }}<br>-->
<!--{{ note.user }}<br><br>-->


{{ response.id }}<br><br>
{{ response.content }}<br><br>
{% endfor %}





<!--<h3><a href="{% url 'news_detail' post.id %}"><u>{{ post }}</u></a></h3>-->

| truncatechars:250
<h6>{{ post.title | truncatechars:250 }}</h6>


# cont = RichTextField(blank=True, null=True)
# content = models.TextField(verbose_name='Контент')
from ckeditor.fields import RichTextField

        # fields = ['title',
        #           'content',
        #           'cont',
        #           'cont_up',
        #           'user',
        #           'category',
        #           ]


    def get_context_data(self, **kwargs):
        """Для добавления новой переменной на страницу (filter)"""
        context = super().get_context_data(**kwargs)
        context['filter'] = NoteFilter(self.request.GET, queryset=self.get_queryset())
        return context

            'name': Textarea(attrs={'cols': 80, 'rows': 20}),

from django.forms import ModelForm, Textarea
from myapp.models import Author

class AuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ('name', 'title', 'birth_date')
        widgets = {
            'name': Textarea(attrs={'cols': 80, 'rows': 20}),
        }

            {{ form.note }}
    {{ form.user }}



<button><a href="{% url 'add_response' note.id %}"><u>Оставить отклик</u></a></button><br><br>
<!--<button><a href="{% url 'add_response' note.id %}"><u>Оставить отклик</u></a></button><br><br>-->

action ="{% url 'Test' }"


            # error = ''
            # form.instance.user = self.request.user
            # print(type(id))
            # print(request.__dict__)
            # form.instance.notenote = id
            # form.instance.note = id
            # form.instance.note = self.kwargs.get('pk')
            # form.instance.note = self.request.note

        # else:
        #     error = 'ERROR'
        # form = ResponseForm()
        # data = {'form': form, 'error': error}
        # return render(request, '/', data)

    # def test(self, request):
    #     print('11111')
    #     if request.method == 'POST':
    #         print('222')
    #         form = ResponseForm(request.POST)
    #         if form.is_valid():
    #             print('333')
    #             form.save()


def test(request):
    form = Test()

    # error = ''
    # if request.method == 'POST':
    #     form = ResponseForm(request.POST)
    #     if form.is_valid():
    #         form.save()
    #         return redirect('main')
    #     else:
    #         error = 'ERROR'
    # form = ResponseForm()
    # data = {'form': form, 'error': error}
    # return render(request, '/', data)

    # def get_object(self, **kwargs):
    #     """Помогает извлечь у объекта нужное значение поля и сам объект"""
    #     id = self.kwargs.get('pk')
    #     print('333333333')
    #     return Note.objects.get(pk=id)

    # def form_valid(self, ResponseForm):
    #     """Автозаполнение поля user"""
    #     print('111111111111111111111111111111111111111')
    #     # ResponseForm.instance.user = self.request.user
    #     # ResponseForm.instance.note = self.request.user
    #     return super().form_valid(ResponseForm)

      # path('test/', Test, name='test'),
      # path('<int:pk>/add_response/', add_response, name='add_response'),
      # path('<int:pk>/delete_response/', delete_response, name='delete_response'),

            # pk = 13
            # Response.objects.get(pk=pk).note_id.add(id)
            # Response.objects.get(pk=pk).note_id.add(request.user)

            print('555')

            # Response.objects.create(note_id=2, user_id='2', content='333content')


class Test(forms.Form):
    content = forms.CharField(max_length=255)
    # content = forms.EmailField(max_length=255)
    user = forms.CharField(max_length=255)
    note = forms.ModelChoiceField(queryset=Note.objects.all())
    # note = forms.ModelChoiceField(Note)

            print('222')


            # id = self.kwargs.get('pk')
            print(id)


    # success_url = reverse_lazy('main')

    #
            # fields = ['content', 'user', 'note']





def add_response(request):
    # pk = request.GET.get('pk', )
    # print('Пользователь', request.user, 'добавлен в подписчики категории:', Category.objects.get(pk=pk))
    # Category.objects.get(pk=pk).subscribers.add(request.user)
    # return redirect('/news/')
    pass


def delete_response(request):
    # pk = request.GET.get('pk', )
    # print('Пользователь', request.user, 'удален из подписчиков категории:', Category.objects.get(pk=pk))
    # Category.objects.get(pk=pk).subscribers.remove(request.user)
    # return redirect('/news/')
    pass


<h5><a href="{% url 'detail' note.id %}"><u>{{ response.contex }}</u></a></h5>

        # print("*******************************************************")
        # print(user_id)

      # return Women.objects.filter(is_published=True)

    # def get(self, request, *args, **kwargs):
    #     user_id = self.request.user.id
    #     print("*********************************", user_id)
    #     return user_id


    # def get(self, request, *args, **kwargs):
    #     user_id = self.request.user
    #     queryset = Response.objects.all()
    #     # queryset = Response.objects.filter(user_id)
    #     return queryset
    # def get(self, request, *args, **kwargs):
    #     user_id = self.request.user
    #     print("*********************************", user_id)
    #
    # def get_context_data(self, **kwargs):
    #     print('1111')
    #     qaz = Response.objects.all()
    #     print('2222')
    #     context = super().get_context_data(**kwargs)
    #     print('3333')
    #     context['filter'] = self.objects.all()
    #     return context

    # def get_context_data(self, **kwargs):
    # context = super().get_context_data(**kwargs)
    #     context['responses'] = NoteFilter(self.request.GET, queryset=self.get_queryset())
    # context['response'] = NoteFilter(self.request.GET, queryset=self.get_queryset())
    # return context
